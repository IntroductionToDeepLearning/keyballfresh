#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        apo_quote_tap: apo_quote_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "APO_QUOTE_TAP";
            #binding-cells = <0>;
            bindings = <&kp APOS>, <&kp DOUBLE_QUOTES>;
        };

        minus_plus_tap: minus_plus_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "MINUS_PLUS_TAP";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
        };

        x_equals_tap: x_equals_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "X_EQUALS_TAP";
            #binding-cells = <0>;
            bindings = <&kp X>, <&kp EQUAL>;

            tapping-term-ms = <175>;
        };

        gui_tap: gui_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_TAP";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&sl 7>;

            tapping-term-ms = <250>;
        };

        alt_tap: alt_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_TAP";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&sl 9>;

            tapping-term-ms = <250>;
        };

        hold_preferred: hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREFERRED";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        balanced_modtap: balanced_modtap {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED_MODTAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-key-repeat";
            label = "NEW_BEHAVIOR";
            #binding-cells = <0>;
            usage-pages = a;
        };

        Hold_key_sticky_layer: Hold_key_sticky_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_KEY_STICKY_LAYER";
            bindings = <&kp>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        mega_gui: mega_gui {
            compatible = "zmk,behavior-tap-dance";
            label = "MEGA_GUI";
            #binding-cells = <0>;
            bindings = <&Hold_key_sticky_layer LEFT_GUI 7>, <&sl 8>;
        };

        mega_alt: mega_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "MEGA_ALT";
            #binding-cells = <0>;
            bindings = <&Hold_key_sticky_layer LEFT_ALT 7>, <&sl 10>;
        };
    };

    combos {
        compatible = "zmk,combos";

        semicolon_combo {
            bindings = <&kp SEMI>;
            key-positions = <33 32>;
        };

        scroll {
            bindings = <&mo 5>;
            key-positions = <19 20 21>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <15 16>;
            timeout-ms = <150>;
            require-prior-idle-ms = <50>;
        };

        numlock {
            bindings = <&tog 4>;
            key-positions = <27 29 28>;
        };

        wa {
            bindings = <&kp LG(LS(P))>;
            key-positions = <9 10 11>;
        };

        scroll_l {
            bindings = <&mo 5>;
            key-positions = <16 14 15>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <7 8 9>;
        };

        console {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <0 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWERTY";
            bindings = <
&kp TAB                   &kp Q      &kp W          &kp E                     &kp R        &kp T                     &kp Y                  &kp U  &kp I      &kp O    &kp P                    &minus_plus_tap
&hold_preferred 6 ESCAPE  &kp A      &kp S          &kp D                     &kp F        &kp G                     &kp H                  &kp J  &kp K      &kp L    &hold_preferred 6 COLON  &apo_quote_tap
&kp LEFT_SHIFT            &kp Z      &x_equals_tap  &kp C                     &kp V        &kp B                     &kp N                  &kp M  &kp COMMA  &kp DOT  &lt 5 SLASH              &kp UNDER
&kp LEFT_CONTROL          &mega_alt  &mega_gui      &hold_preferred 3 ESCAPE  &lt 2 SPACE             &kp BACKSPACE  &mt RIGHT_SHIFT ENTER                                                      &tog 1
            >;
        };

        colemak {
            label = "colemak";
            bindings = <
&trans  &kp Q   &kp W          &kp F   &kp P   &kp B              &kp J   &kp L  &kp U      &kp Y    &kp LS(COLON)         &minus_plus_tap
&trans  &kp A   &kp R          &kp S   &kp T   &kp G              &kp M   &kp N  &kp E      &kp I    &balanced_modtap 6 O  &apo_quote_tap
&trans  &kp Z   &x_equals_tap  &kp C   &kp D   &kp V              &kp K   &kp H  &kp COMMA  &kp DOT  &lt 5 SLASH           &kp UNDER
&trans  &trans  &trans         &trans  &trans             &trans  &trans                                                   &tog 1
            >;
        };

        symbol_nav {
            label = "NAV";
            bindings = <
&kp TAB  &kp LS(LC(TAB))  &kp HOME   &kp UP          &kp END    &kp LC(TAB)                         &kp ASTERISK   &kp LBKT              &kp RBKT               &kp GRAVE         &kp PIPE    &minus_plus_tap
&mo 4    &mkp RCLK        &kp LEFT   &kp DOWN_ARROW  &kp RIGHT  &mkp LCLK                           &kp N0         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPS          &kp DOLLAR  &apo_quote_tap
&trans   &mkp MB4         &kp PG_UP  &mkp MCLK       &kp PG_DN  &mkp MB5                            &kp LESS_THAN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp GREATER_THAN  &kp QMARK   &kp UNDER
&trans   &trans           &trans     &trans          &trans                      &kp LA(BACKSPACE)  &kp SPACE                                                                                 &trans
            >;
        };

        num_homerow {
            label = "Num";
            bindings = <
&kp TAB  &kp EXCL  &kp AT     &kp HASH       &kp DOLLAR  &kp PERCENT                     &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE    &kp RIGHT_BRACE  &minus_plus_tap
&mo 4    &kp N1    &kp N2     &kp N3         &kp N4      &kp N5                          &kp N6         &kp N7                &kp N8                 &kp N9            &kp N0           &apo_quote_tap
&trans   &kp PLUS  &kp EQUAL  &kp BACKSLASH  &kp GRAVE   &kp TILDE                       &kp LESS_THAN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GREATER_THAN  &kp QMARK        &kp UNDER
&trans   &trans    &trans     &trans         &trans                       &kp BACKSPACE  &kp SPACE                                                                                      &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&none   &kp BSPC  &kp C_REWIND  &kp C_VOL_UP  &kp C_FAST_FORWARD  &kp F10              &none  &none  &none  &none  &none  &none
&trans  &kp BSPC  &kp K_PREV    &kp C_VOL_DN  &kp K_NEXT          &kp F11              &none  &none  &none  &none  &none  &none
&none   &kp BSPC  &kp F1        &kp F2        &kp C_STOP          &kp F12              &none  &none  &none  &none  &none  &none
&trans  &trans    &trans        &trans        &trans                           &trans  &mo 4                              &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                        &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&kp LG(GRAVE)  &kp HOME    &kp UP       &kp END        &kp LC(LS(TAB))  &kp LC(TAB)                         &trans     &kp LC(LS(TAB))  &kp LC(TAB)  &trans  &trans  &trans
&trans         &kp LEFT    &kp DOWN     &kp RIGHT      &mkp LCLK        &mkp RCLK                           &mkp MCLK  &mkp LCLK        &mkp RCLK    &trans  &trans  &trans
&trans         &kp DELETE  &kp PAGE_UP  &kp PAGE_DOWN  &mkp MCLK        &mkp MB4                            &trans     &mkp MB4         &mkp MB5     &trans  &trans  &trans
&trans         &trans      &trans       &trans         &mo 4                             &kp LA(BACKSPACE)  &trans                                                   &trans
            >;
        };

        numgui {
            label = "NUMgui";
            bindings = <
&kp TAB    &kp SLASH   &kp LG(W)   &kp LG(E)   &kp LG(R)   &kp LG(T)               &kp ASTERISK   &kp LBKT        &kp RBKT         &kp NUMBER_9      &kp NUMBER_0  &minus_plus_tap
&trans     &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)              &kp LG(N6)     &kp LG(N7)      &kp LG(N8)       &kp LG(N9)        &kp LG(N0)    &kp J
&kp J      &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)   &kp LG(B)               &kp LESS_THAN  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp GREATER_THAN  &kp QMARK     &kp UNDER
&kp COMMA  &kp LG(N0)  &kp DOT     &trans      &trans                      &trans  &trans                                                                          &trans
            >;
        };

        shiftgui {
            label = "shiftgui";
            bindings = <
&kp TAB    &kp LS(LG(Q))  &kp LG(LS(W))  &kp LG(E)      &kp LG(R)      &kp LG(T)                  &kp LS(LG(Y))  &kp LS(LG(U))  &kp LG(LS(I))    &kp LS(LG(O))     &kp LS(LG(P))   &minus_plus_tap
&trans     &kp LG(LS(A))  &kp LG(LS(S))  &kp LG(LS(D))  &kp LG(LS(F))  &kp LG(LS(G))              &kp LG(LS(H))  &kp LG(LS(J))  &kp LG(LS(K))    &kp LG(LS(L))     &kp LG(LS(N0))  &kp J
&kp J      &kp LG(LS(Z))  &kp LG(LS(X))  &kp LG(LS(C))  &kp LG(LS(V))  &kp LG(LS(B))              &kp LS(LG(N))  &kp LS(LG(M))  &kp RIGHT_BRACE  &kp GREATER_THAN  &kp QMARK       &kp UNDER
&kp COMMA  &kp LG(N0)     &kp DOT        &trans         &trans                            &trans  &trans                                                                           &trans
            >;
        };

        numalt {
            label = "NUMalt";
            bindings = <
&kp TAB    &kp SLASH         &kp LA(N7)  &kp LA(N8)  &kp LA(N9)  &kp ASTERISK              &kp ASTERISK   &kp LBKT        &kp RBKT         &kp NUMBER_9      &kp NUMBER_0  &minus_plus_tap
&trans     &kp LA(N1)        &kp LA(N2)  &kp LA(N3)  &kp LA(N4)  &kp LA(N5)                &kp LA(N6)     &kp LA(N7)      &kp LA(N8)       &kp LA(N9)        &kp LA(N0)    &apo_quote_tap
&trans     &kp LA(NUMBER_0)  &kp LA(N1)  &kp LA(N2)  &kp LA(N3)  &kp EQUAL                 &kp LESS_THAN  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp GREATER_THAN  &kp QMARK     &kp UNDER
&kp COMMA  &kp LA(N0)        &kp DOT     &trans      &trans                        &trans  &trans                                                                          &trans
            >;
        };

        altshift {
            label = "altshift";
            bindings = <
&kp TAB    &kp LS(LA(Q))         &kp LS(LA(W))         &kp LG(E)             &kp LG(R)             &kp LG(T)                   &kp LS(LG(Y))         &kp LS(LG(U))   &kp LG(LS(I))    &kp LS(LG(O))     &kp LS(LG(P))   &minus_plus_tap
&trans     &kp LS(LA(NUMBER_1))  &kp LS(LA(NUMBER_2))  &kp LS(LA(NUMBER_3))  &kp LS(LA(NUMBER_4))  &kp LS(LA(N5))              &kp LS(LA(NUMBER_6))  &kp LS(LA(N7))  &kp LS(LA(N8))   &kp LS(LA(N9))    &kp LS(LA(N0))  &kp J
&kp J      &kp LG(LS(Z))         &kp LG(LS(X))         &kp LG(LS(C))         &kp LG(LS(V))         &kp LG(LS(B))               &kp LS(LG(N))         &kp LS(LG(M))   &kp RIGHT_BRACE  &kp GREATER_THAN  &kp QMARK       &kp UNDER
&kp COMMA  &kp LG(N0)            &kp DOT               &trans                &trans                                    &trans  &trans                                                                                   &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&none   &kp Q           &kp W           &kp E         &kp R      &kp T              &kp Y          &kp U      &kp I      &kp O  &kp P  &none
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none              &kp PAGE_UP    &mkp LCLK  &mkp RCLK  &mo 5  &mo 6  &none
&none   &none           &none           &none         &none      &none              &kp PAGE_DOWN  &none      &none      &none  &none  &none
&trans  &trans          &trans          &trans        &trans                &trans  &trans                                             &none
            >;
        };

        numerical {
            label = "NUM";
            bindings = <
&kp TAB    &kp SLASH     &kp N7   &kp N8  &kp N9  &kp ASTERISK              &kp ASTERISK   &kp LBKT              &kp RBKT               &kp GRAVE         &kp PIPE   &minus_plus_tap
&trans     &kp MINUS     &kp N4   &kp N5  &kp N6  &kp PLUS                  &kp MINUS      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT       &kp COLON  &apo_quote_tap
&trans     &kp NUMBER_0  &kp N1   &kp N2  &kp N3  &kp EQUAL                 &kp LESS_THAN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp GREATER_THAN  &kp QMARK  &kp UNDER
&kp COMMA  &kp N0        &kp DOT  &trans  &trans                    &trans  &trans                                                                                   &trans
            >;
        };
    };
};
